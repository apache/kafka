# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.clients.Consumer.ConsumerConfig for additional details and defaults

  
#Here goes all the settings of RDMA connections. 

# the size of completion queue per rdma CONNECTION.  I also use separate queue for send and receive.
num.rdmanetwork.maxcomplqueuesize=16000
# Maximum number of outstanding requests for send and recv per connection
num.rdmanetwork.maxsendsize=2048
num.rdmanetwork.maxreceivesize=128
# How many completions to poll at a time.
num.rdmanetwork.wcbatch=32

# how many outstanding Produce requests we can have
num.rdmanetwork.maxrequestquota=80
 


# Consumer fetches entries to a single preallcoated buffer.
# When the buffer is exhausted, it will wait for completion for all outstanding RDMA reads and try to wrap it around.
# the code is org/apache/kafka/clients/FetchRdmaSessionHandler.java  lines 500-600
num.rdmafetch.cachesize=16777216

# the the buffer is almost full we can start wrapping around earlier. If the number of free bytes in the buffer is lower than the limit below it will do "wrap around"
num.rdmafetch.wraplimit=2048


# the value below defines whether a consumer will use slots for active files to update watermark position
num.rdmafetch.withslots=false
#num.rdmafetch.withslots=true

# If we use slots, how often in nanoseconds we need to issue rdma read for reading slots. We read all slots in one Read request as they are contiguous
num.rdmafetch.slotupdatetimeout=100000 // 100us


# How many ms to wait before resending GetRdmaAddressRequest
num.rdmafetch.tcptimeout=2000





